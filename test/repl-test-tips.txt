
(ns clinvar-submitter.core)
(require '[clinvar-submitter.ld :as ld :refer [ld-> ld1-> prop=]])

;; the input file (can contain single or multiple interps)

;; single path interp with pmid evidence on PP4 assertion.
;;(def input-file "data/interp_hl-path-PP4-met-evidence.json")

;; multi interps
(def input-file "data/allinput.json")

;; the sepio_context file (check versions if it changes)
(def sepio-context "data/sepio_context.jsonld")

;; the HL nov '18 clinvar scv file
(def clinvar-scv-file "data/scv-files/HEARING-LOSS-SCV-2018-12-10.json")

(def options {:jsonld-context sepio-context
              :clinvar-scv-file clinvar-scv-file})

(def scv-map (if clinvar-scv-file (json/parse-string (slurp clinvar-scv-file) true)))

;; the symbol table for the input file and sepio_context
(def sym-tbl (ld/generate-symbol-table input-file sepio-context))

;; the map of values from the symbol table
(def m (vals sym-tbl))

;; all of the interp objects
(def interp-seq ((prop= sym-tbl "variant pathogenicity interpretation" "type") m))


;; to grab the first interp
(def interp-input (first interp-seq))

;; construct table with a single 'interp-input'
(def row (construct-variant sym-tbl interp-input  1 options scv-map))

(def options {:jsonld-context sepio-context})

;; to get condition
(ld-> sym-tbl interp-input "is_about_condition")

(def variant (form/get-variant sym-tbl interp 1 scv-map))
(def can-allele (ld1-> sym-tbl interp-input "is_about_allele"))

(def i (form/get-interpretation sym-tbl interp-input 1))
(def condition (form/get-condition sym-tbl interp-input 1 (:significance i)))

;; extras
(def input-file "data/sepio-wout-coords.json")
(def sym-tbl (ld/generate-symbol-table input-file sepio-context))
(def m (vals sym-tbl))
(def interp-seq ((prop= sym-tbl "variant pathogenicity interpretation" "type") m))
(def interp-input (first interp-seq))
(def scv-map {})
(def can-allele (ld1-> sym-tbl interp-input "is_about_allele"))
(def b38-ctx-allele (ld1-> sym-tbl can-allele "related contextual allele" (prop= sym-tbl "GRCh38" "reference genome build" "label")))
(def b38-hgvs (ld1-> sym-tbl b38-ctx-allele "allele name" (prop= sym-tbl "hgvs" "name type") "name"))
(form/variant-coord sym-tbl b38-ctx-allele 1)
